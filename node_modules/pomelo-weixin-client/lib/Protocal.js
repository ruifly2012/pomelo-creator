'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require('./util'),
    copyArray = _require.copyArray;

module.exports = function () {
    function Protocol() {
        _classCallCheck(this, Protocol);
    }

    _createClass(Protocol, null, [{
        key: 'strencode',

        /**
         * pomele client encode
         * id message id;
         * route message route
         * msg message body
         * socketio current support string
         */
        value: function strencode(str) {
            var buffer = new Uint8Array(str.length * 3);
            var offset = 0;
            for (var i = 0; i < str.length; i++) {
                var charCode = str.charCodeAt(i);
                var codes = null;
                if (charCode <= 0x7f) {
                    codes = [charCode];
                } else if (charCode <= 0x7ff) {
                    codes = [0xc0 | charCode >> 6, 0x80 | charCode & 0x3f];
                } else {
                    codes = [0xe0 | charCode >> 12, 0x80 | (charCode & 0xfc0) >> 6, 0x80 | charCode & 0x3f];
                }
                for (var j = 0; j < codes.length; j++) {
                    buffer[offset] = codes[j];
                    ++offset;
                }
            }
            var _buffer = new Uint8Array(offset);
            copyArray(_buffer, 0, buffer, 0, offset);
            return _buffer;
        }
    }, {
        key: 'strdecode',


        /**
         * client decode
         * msg String data
         * return Message Object
         */
        value: function strdecode(buffer) {
            var bytes = new Uint8Array(buffer);
            var array = [];
            var offset = 0;
            var charCode = 0;
            var end = bytes.length;
            while (offset < end) {
                if (bytes[offset] < 128) {
                    charCode = bytes[offset];
                    offset += 1;
                } else if (bytes[offset] < 224) {
                    charCode = ((bytes[offset] & 0x3f) << 6) + (bytes[offset + 1] & 0x3f);
                    offset += 2;
                } else if (bytes[offset] < 240) {
                    charCode = ((bytes[offset] & 0x0f) << 12) + ((bytes[offset + 1] & 0x3f) << 6) + (bytes[offset + 2] & 0x3f);
                    offset += 3;
                } else if (bytes[offset] < 256) {
                    charCode = ((bytes[offset] & 0x07) << 18) + ((bytes[offset + 1] & 0x3f) << 12) + ((bytes[offset + 2] & 0x3f) << 6) + (bytes[offset + 3] & 0x3f);
                    offset += 4;
                }
                array.push(charCode);
            }
            return String.fromCodePoint ? String.fromCodePoint.apply(null, array) : String.fromCharCode.apply(null, array);
        }
    }]);

    return Protocol;
}();